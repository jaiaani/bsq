------Funções() =>

utils
	ft_strlen => pegar o total de caracteres do mapa e outras strings;
	
mapa
	map_catch(file_name, dest_str) => recebe o caminho do arquivo ex: my_awesome_map.txt e um ponteiro para uma
		     variável que vai armazenar o mapa.
			Em caso de erro em ler o mapa map_catch() vai retornar -1;
	
	ft_map_info(map) => recebe o mapa, essa função aloca o espaço de 4 char na memória
			para armazenar os caracteres da primeira linha, que são:
			 #{numero de linhas, vazio, obstáculo, cheio};
			  --- strdup ---

	ft_linelen(map) => retorna o tamanho de uma linha, contando a quantidade de caracteres até que haja
			    uma quebra de linha;

	--- validação
	
	map_check_lineslen(map + 5) => recebe o ponteiro apontando para os próximos 5 caracteres do mapa,
				     dessa forma a função recebe o mapa sem a primeira linha (que contém
				     as informações do mapa) e percorre cada linha checando, se quando há 
				     uma quebra de linha, o tamanho da próxima linha é diferente do tamanho
				     da primeira linha. Retorna 0 ou 1.
	
	map_check_breaklines(map + 5) => recebe o mapa, o número de linhas e largura das linhas. O Loop ocorre
					 l(largura) vezes e checa se a o que deveria ser o ultimo caractere não é
				 	 uma quebra de linha. Soma a posição do bl + len_l (length of line) para
					 checar as próximas linhas.
	
	map_check_chars(map + 5) => recebe o mapa e os caracteres declarados na primeira linha, se caso tenha algum
				   diferente, retorna 0;


--- exemplo de algoritmo que soluciona: 
https://github.com/mission-peace/interview/blob/master/src/com/interview/dynamic/MaximumSizeSubMatrix.java

